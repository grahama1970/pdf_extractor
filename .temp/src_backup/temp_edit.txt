#!/usr/bin/env python3
'''
Script to update table_extractor.py with improved table merger integration
'''
import os
import re
from pathlib import Path

# Path to table_extractor.py
table_extractor_path = Path('src/table_extractor.py')

# Make a backup
backup_path = table_extractor_path.with_suffix('.py.bak3')
os.system(f'cp {table_extractor_path} {backup_path}')
print(f'Created backup: {backup_path}')

# Read the file
with open(table_extractor_path, 'r') as f:
    content = f.read()

# Add merge_strategy parameter to extract_tables function
function_def_pattern = r'def extract_tables\(\s*pdf_path: Union\[str, Path\],\s*pages: Union\[str, List\[int\]\] = all,\s*flavor: str = CAMELOT_DEFAULT_FLAVOR,\s*\)'
function_def_replacement = r'def extract_tables(\n    pdf_path: Union[str, Path], \n    pages: Union[str, List[int]] = all,\n    flavor: str = CAMELOT_DEFAULT_FLAVOR,\n    merge_strategy: str = conservative,\n)'

content = re.sub(function_def_pattern, function_def_replacement, content)

# Update the docstring to include merge_strategy parameter
docstring_pattern = r'    Args:\s*pdf_path: Path to PDF file\s*pages: Page numbers to process \(all or list of numbers\)\s*flavor: Table extraction method \(lattice or stream\)'
docstring_replacement = r'    Args:\n        pdf_path: Path to PDF file\n        pages: Page numbers to process (all or list of numbers)\n        flavor: Table extraction method (lattice or stream)\n        merge_strategy: Strategy for table merging (aggressive, conservative, none)'

content = re.sub(docstring_pattern, docstring_replacement, content, flags=re.DOTALL)

# Update the multi-page table merging code
merge_pattern = r'# Apply multi-page table merging if available.*?results = process_and_merge_tables\(tables\)'
merge_replacement = r'# Apply multi-page table merging if available\n        if len(results) > 1 and IMPROVED_MERGER_AVAILABLE:\n            logger.info(fApplying multi-page table merging with strategy: {merge_strategy})\n            original_count = len(results)\n            \n            # Use our improved table merger with specified strategy\n            results = process_and_merge_tables(tables, merge_strategy=merge_strategy)'

content = re.sub(merge_pattern, merge_replacement, content, flags=re.DOTALL)

# Write the updated content
with open(table_extractor_path, 'w') as f:
    f.write(content)

print(f'Updated {table_extractor_path} with improved merge strategy support.')
