from arango import ArangoClient
from pytrie import StringTrie
from rapidfuzz import fuzz
import re

# Define glossary with 15 terms, including multi-word phrases
GLOSSARY = {
    "Airplane Parts": "Components used in the construction and maintenance of aircraft.",
    "Control Tower": "A facility that manages aircraft takeoff, landing, and ground traffic.",
    "Jet Engine": "A type of engine that propels aircraft by expelling jet streams.",
    "Flight Path": "The planned route or trajectory an aircraft follows during flight.",
    "Avionics System": "Electronic systems used in aircraft for navigation and communication.",
    "Landing Gear": "The undercarriage of an aircraft used during takeoff and landing.",
    "Aerodynamic Design": "The shape of an aircraft optimized to reduce air resistance.",
    "Cabin Pressure": "The controlled air pressure inside an aircraft cabin for passenger comfort.",
    "Thrust Vector": "The direction of force generated by an aircraft's engines.",
    "Wing Flaps": "Movable parts on aircraft wings to control lift and drag.",
    "Radar System": "A system used to detect aircraft and other objects in the airspace.",
    "Fuel Tank": "A container for storing fuel on an aircraft.",
    "Cockpit Display": "The interface in the cockpit showing flight information.",
    "Navigation Aid": "Tools or systems that assist in aircraft navigation.",
    "Turbulence Alert": "A warning system for detecting unstable air conditions."
}

def find_glossary_terms(search_string, similarity_threshold=97):
    """
    Search for glossary terms (including multi-word phrases) in the provided string
    using pytrie and filter with rapidfuzz for whole keyword matches.
    
    Args:
        search_string (str): The text to search for glossary terms.
        similarity_threshold (float): Minimum rapidfuzz similarity score (default: 97).
    
    Returns:
        list: List of dictionaries containing matched terms and their definitions.
    """
    # Initialize StringTrie with glossary terms
    trie = StringTrie()
    for term in GLOSSARY:
        trie[term.lower()] = term

    # Convert search string to lowercase for case-insensitive matching
    search_string_lower = search_string.lower()

    # Find potential matches using pytrie and regex for whole keyword
    potential_matches = set()
    for term in GLOSSARY:
        term_lower = term.lower()
        # Create regex pattern for whole keyword match (e.g., \bAirplane Parts\b)
        pattern = r'\b' + re.escape(term_lower) + r'\b'
        if re.search(pattern, search_string_lower):
            potential_matches.add(term)

    # Filter matches using rapidfuzz
    final_matches = []
    for term in potential_matches:
        # Use rapidfuzz to confirm similarity for the full term
        similarity = fuzz.ratio(term.lower(), term.lower())
        if similarity >= similarity_threshold:
            final_matches.append({
                "term": term,
                "definition": GLOSSARY[term]
            })

    return final_matches

def search_documents_by_tags(db, tags, match_type="ALL", view_name="documents_view", collection_name="documents"):
    """
    Search ArangoDB documents by tags and find glossary terms in their text.
    
    Args:
        db: ArangoDB database instance.
        tags (list): List of tags to filter documents (e.g., ["tech", "art"]).
        match_type (str): "ANY" to match any tag, "ALL" to match all tags (default: "ALL").
        view_name (str): Name of the search view.
        collection_name (str): Name of the collection.
    
    Returns:
        list: List of dictionaries containing document details and matched glossary terms.
    """
    # Validate match_type
    if match_type not in ["ANY", "ALL"]:
        raise ValueError("match_type must be 'ANY' or 'ALL'")

    # AQL query to filter documents by tags using INTERSECTION
    aql_query = f"""
    FOR doc IN {collection_name}
        LET tagIntersection = INTERSECTION(doc.tags, @tags)
        FILTER LENGTH(tagIntersection) {"> 0" if match_type == "ANY" else "== LENGTH(@tags)"}
        RETURN {{ text: doc.text, tags: doc.tags }}
    """

    # Bind parameters
    bind_vars = {
        "tags": tags
    }

    try:
        # Execute AQL query
        cursor = db.aql.execute(aql_query, bind_vars=bind_vars)
        results = []

        # Process each document
        for doc in cursor:
            text = doc["text"]
            tags = doc["tags"]
            # Find glossary terms in the document's text
            glossary_matches = find_glossary_terms(text)
            results.append({
                "text": text,
                "tags": tags,
                "glossary_matches": glossary_matches
            })

        return results

    except Exception as e:
        print(f"An error occurred: {e}")
        return []

# Example usage
if __name__ == "__main__":
    # Initialize ArangoDB client
    client = ArangoClient(hosts='http://localhost:8529')
    db = client.db('_system', username='root', password='your_password')

    # Test tags
    search_tags = ["tech", "art"]

    # Search documents with match_type="ALL"
    print("Searching for documents with ALL tags:", search_tags)
    results_all = search_documents_by_tags(db, search_tags, match_type="ALL")
    if results_all:
        print(f"Found {len(results_all)} matching documents:")
        for result in results_all:
            print(f"\nDocument:")
            print(f"  Text: {result['text']}")
            print(f"  Tags: {result['tags']}")
            if result['glossary_matches']:
                print("  Glossary Matches:")
                for match in result['glossary_matches']:
                    print(f"    - {match['term']}: {match['definition']}")
            else:
                print("  Glossary Matches: None")
    else:
        print("No matching documents found.")

    # Search documents with match_type="ANY"
    print("\nSearching for documents with ANY tags:", search_tags)
    results_any = search_documents_by_tags(db, search_tags, match_type="ANY")
    if results_any:
        print(f"Found {len(results_any)} matching documents:")
        for result in results_any:
            print(f"\nDocument:")
            print(f"  Text: {result['text']}")
            print(f"  Tags: {result['tags']}")
            if result['glossary_matches']:
                print("  Glossary Matches:")
                for match in result['glossary_matches']:
                    print(f"    - {match['term']}: {match['definition']}")
            else:
                print("  Glossary Matches: None")
    else:
        print("No matching documents found.")