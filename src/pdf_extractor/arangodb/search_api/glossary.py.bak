"""
Glossary Search Module for PDF Extractor ArangoDB Integration.

This module provides functionality for finding glossary terms in text content
using pytrie for efficient prefix matching and rapidfuzz for fuzzy matching.

Third-Party Package Documentation:
- python-arango: https://python-driver.arangodb.com/
- pytrie: https://github.com/gsakkis/pytrie
- rapidfuzz: https://rapidfuzz.github.io/RapidFuzz/

Sample Input:
Text content to search within and optional glossary dictionary

Expected Output:
List of matched glossary terms with their definitions
"""
import sys
import os
from typing import Dict, List, Any, Optional
import re
from loguru import logger

from pytrie import StringTrie
from rapidfuzz import fuzz
from arango.database import StandardDatabase

# Default glossary - can be overridden with custom glossary
DEFAULT_GLOSSARY = {
    "Airplane Parts": "Components used in the construction and maintenance of aircraft.",
    "Control Tower": "A facility that manages aircraft takeoff, landing, and ground traffic.",
    "Jet Engine": "A type of engine that propels aircraft by expelling jet streams.",
    "Flight Path": "The planned route or trajectory an aircraft follows during flight.",
    "Avionics System": "Electronic systems used in aircraft for navigation and communication.",
    "Landing Gear": "The undercarriage of an aircraft used during takeoff and landing.",
    "Aerodynamic Design": "The shape of an aircraft optimized to reduce air resistance.",
    "Cabin Pressure": "The controlled air pressure inside an aircraft cabin for passenger comfort.",
    "Thrust Vector": "The direction of force generated by an aircraft's engines.",
    "Wing Flaps": "Movable parts on aircraft wings to control lift and drag.",
    "Radar System": "A system used to detect aircraft and other objects in the airspace.",
    "Fuel Tank": "A container for storing fuel on an aircraft.",
    "Cockpit Display": "The interface in the cockpit showing flight information.",
    "Navigation Aid": "Tools or systems that assist in aircraft navigation.",
    "Turbulence Alert": "A warning system for detecting unstable air conditions."
}

def search_glossary(
    search_text: str,
    glossary: Dict[str, str] = None,
    similarity_threshold: float = 97.0,
    db: StandardDatabase = None,
    collection_name: str = None
) -> List[Dict[str, Any]]:
    """
    Search for glossary terms in the provided text content.
    
    Args:
        search_text: The text to search for glossary terms
        glossary: Dictionary of terms and definitions (uses default if None)
        similarity_threshold: Minimum similarity score (0-100) for fuzzy matching
        db: Optional ArangoDB database connection for loading glossary terms
        collection_name: Optional collection name for loading glossary terms
        
    Returns:
        List of dictionaries containing matched terms and definitions
        
    Raises:
        ValueError: If search_text is empty
    """
    if not search_text or search_text.strip() == "":
        raise ValueError("Search text cannot be empty")
    
    # Use provided glossary or default
    active_glossary = glossary or DEFAULT_GLOSSARY
    
    # Load glossary from database if requested
    if db and collection_name:
        try:
            # Query to get glossary terms from database
            aql = f"""
            FOR doc IN {collection_name}
                FILTER doc.type == "glossary"
                RETURN {{
                    term: doc.term,
                    definition: doc.definition
                }}
            """
            cursor = db.aql.execute(aql)
            db_glossary = {doc["term"]: doc["definition"] for doc in cursor}
            
            if db_glossary:
                logger.info(f"Loaded {len(db_glossary)} glossary terms from database")
                active_glossary = db_glossary
        except Exception as e:
            logger.warning(f"Failed to load glossary from database: {e}")
    
    # Initialize StringTrie with glossary terms
    trie = StringTrie()
    for term in active_glossary:
        trie[term.lower()] = term
    
    # Convert search string to lowercase for case-insensitive matching
    search_text_lower = search_text.lower()
    
    # Find potential matches using pytrie and regex for whole word or phrase
    potential_matches = set()
    for term in active_glossary:
        term_lower = term.lower()
        # Create regex pattern for whole term match
        # For multi-word terms, each word can have spaces, newlines, punctuation between them
        words = term_lower.split()
        if len(words) > 1:
            # For multi-word terms, allow for flexible spacing/punctuation between words
            pattern = r'\b' + r'\s*[\s\.,;:!\?\-\(\)]*\s*'.join(map(re.escape, words)) + r'\b'
        else:
            # For single-word terms, use simple word boundary
            pattern = r'\b' + re.escape(term_lower) + r'\b'
        
        if re.search(pattern, search_text_lower):
            potential_matches.add(term)
    
    # Filter matches using rapidfuzz
    final_matches = []
    for term in potential_matches:
        # Find best match position in text
        term_lower = term.lower()
        
        # For multi-word terms, try to find the full phrase
        best_score = 0
        
        # Check each potential location where the term might appear
        for match in re.finditer(r'\b\w+\b', search_text_lower):
            start_pos = match.start()
            # Check a range around this position that could contain the term
            window_size = len(term) * 3  # Allow for extra characters between words
            end_pos = min(start_pos + window_size, len(search_text_lower))
            
            # Get the text window
            window = search_text_lower[start_pos:end_pos]
            
            # Calculate similarity
            similarity = fuzz.partial_ratio(term_lower, window)
            best_score = max(best_score, similarity)
        
        # Add match if similarity is above threshold
        if best_score >= similarity_threshold:
            final_matches.append({
                "term": term,
                "definition": active_glossary[term],
                "similarity": best_score
            })
    
    # Sort by similarity score (highest first)
    final_matches.sort(key=lambda x: x.get("similarity", 0), reverse=True)
    
    logger.info(f"Found {len(final_matches)} glossary terms in text")
    return final_matches

if __name__ == "__main__":
    # Example usage
    from pdf_extractor.arangodb.arango_setup import connect_arango, ensure_database
    
    # Configure logging
    logger.remove()
    logger.add(
        sys.stderr,
        level="INFO",
        format="{time:HH:mm:ss} | {level:<7} | {message}"
    )
    
    # Test search string
    search_text = "Airplane Parts are a common thing in aerospace engineering. The Control Tower manages all flight operations."
    
    # Find matching glossary terms
    matches = search_glossary(search_text)
    
    # Print results
    if matches:
        logger.info(f"Found {len(matches)} matching glossary terms:")
        for match in matches:
            logger.info(f"- {match['term']} ({match['similarity']:.1f}%): {match['definition']}")
    else:
        logger.info("No matching glossary terms found.")
